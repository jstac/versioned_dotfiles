snippet alpha
	α

snippet Alpha 
	Α 

snippet beta
	β

snippet Beta 
	Β 

snippet gamma
	γ

snippet Gamma 
	Γ 

snippet delta
	δ

snippet Delta 
	Δ 

snippet epsilon
	ϵ

snippet varepsilon
	ε

snippet Epsilon 
	Ε

snippet zeta
	ζ
    
snippet Zeta 
	Ζ

snippet eta
	η

snippet Eta 
	Η

snippet theta
	θ

snippet Theta 
	Θ 

snippet kappa
	κ

snippet Kappa 
	Κ

snippet lambda
	λ

snippet Lambda 
	Λ

snippet mu
	μ

snippet Mu
	Μ 

snippet nu
	ν

snippet Nu
	Ν

snippet xi
	ξ

snippet Xi
	Ξ

snippet pi
	π

snippet Pi
	Π

snippet rho
	ρ

snippet Rho
	Ρ

snippet sigma
	σ

snippet varsigma
	ς

snippet Sigma
	Σ

snippet tau
	τ

snippet Tau
	Τ

snippet upsilon
	υ

snippet Upsilon
	Υ

snippet phi
	φ

snippet phi
	ϕ

snippet varphi
	φ

snippet Phi
	Φ

snippet chi
	χ

snippet Chi
	Χ

snippet psi
	ψ

snippet Psi
	Ψ

snippet omega
	ω

snippet Omega
	Ω


snippet imp
	import ${0:module}

snippet np
	import numpy as np


snippet from
	from ${1:package} import ${0:module}


snippet wh
	while $1:
		${0:${VISUAL}}

# dowh - does the same as do...while in other languages
snippet dowh
	while True:
		${1}
		if $0:
			break

snippet with
	with ${1:expr} as ${2:var}:
		${0:${VISUAL}}

snippet class
	class ${1:class_name}:
		"""${2:description}"""
		def __init__(self, ${3:args}):
			${0}

# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}

snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}


# Ifs
snippet if
	if $1:
		${0:${VISUAL}}
snippet el
	else:
		${0:${VISUAL}}
snippet ei
	elif $1:
		${0:${VISUAL}}

# Match
snippet match Structural pattern matching
	match ${1:expression}:
		case ${2:pattern_1}:
			${3:pass}
		case ${4:pattern_2}:
			${5:pass}

# Match with wildcard
snippet matchw Pattern matching with wildcard
	match ${1:expression}:
		case ${2:pattern_1}:
			${3:pass}
		case _:
			${0:pass}

# For
snippet for
	for ${1:item} in ${2:items}:
		${0}

# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${0:action}

snippet ret
	return ${0}

snippet try Try/Except
	try:
		${1:${VISUAL}}
	except ${2:Exception} as ${3:e}:
		${0:raise $3}

snippet ifmain
	if __name__ == '__main__':
		${0:main()}

# debugger breakpoint
snippet br
	breakpoint()
# python debugger (pdb)
snippet pdb
	__import__('pdb').set_trace()
# bpython debugger (bpdb)
snippet ipdb
	__import__('ipdb').set_trace()
# embed ipython itself
snippet iem
	__import__('IPython').embed()
# remote python debugger (rpdb)

snippet "
	"""${0:doc}
	"""

# comprehensions
snippet lcp list comprehension
	[${1} for ${2} in ${3:${VISUAL}}]${0}

snippet dcp dict comprehension
	{${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}


# Printing
snippet pr
	print($0)
